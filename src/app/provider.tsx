// src/app/provider.tsx (new file, adapted to Convex)
"use client";

import React, { createContext, useContext, useEffect, useState } from "react";
import { useUser } from "@clerk/nextjs";
import { useMutation, useQuery } from "convex/react";
import { api } from "../../convex/_generated/api"; // Adjust path if needed (generated by Convex)
import type { Id } from "../../convex/_generated/dataModel"; // Import for Id type

interface UserDetail {
  _id: Id<"users">;
  _creationTime: number;
  clerkId: string;
  name: string;
  email: string;
  credits: number;
}

export const UserDetailContext = createContext<{
  userDetail: UserDetail | undefined;
  setUserDetail: React.Dispatch<React.SetStateAction<UserDetail | undefined>>;
}>({
  userDetail: undefined,
  setUserDetail: () => {},
});

// Optional: If you need OnSaveContext, add it similarly
export const OnSaveContext = createContext<{
  onSaveData: unknown;
  setOnSaveData: React.Dispatch<React.SetStateAction<unknown>>;
}>({
  onSaveData: null,
  setOnSaveData: () => {},
});

function Provider({ children }: { children: React.ReactNode }) {
  const { user } = useUser();
  const [userDetail, setUserDetail] = useState<UserDetail | undefined>();
  const [onSaveData, setOnSaveData] = useState<unknown>(null);

  const createOrGetUser = useMutation(api.users.createOrGet);
  const currentUserDetail = useQuery(api.users.get);

  useEffect(() => {
    if (user) {
      createOrGetUser()
        .then((res) => {
          setUserDetail(res ?? undefined);
        })
        .catch((err) => console.error("Error creating/getting user:", err));
    }
  }, [user, createOrGetUser]);

  // If you want to sync state with query
  useEffect(() => {
    if (currentUserDetail) {
      setUserDetail(currentUserDetail);
    }
  }, [currentUserDetail]);

  return (
    <UserDetailContext.Provider value={{ userDetail, setUserDetail }}>
      <OnSaveContext.Provider value={{ onSaveData, setOnSaveData }}>
        {children}
      </OnSaveContext.Provider>
    </UserDetailContext.Provider>
  );
}

export default Provider;
